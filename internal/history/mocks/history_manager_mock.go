// Code generated by MockGen. DO NOT EDIT.
// Source: history_manager.go

// Package historymock is a generated GoMock package.
package historymock

import (
	context "context"
	history "gopher-translator-service/internal/history"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// HistoryManager is a mock of Manager interface.
type HistoryManager struct {
	ctrl     *gomock.Controller
	recorder *HistoryManagerMockRecorder
}

// HistoryManagerMockRecorder is the mock recorder for HistoryManager.
type HistoryManagerMockRecorder struct {
	mock *HistoryManager
}

// NewHistoryManager creates a new mock instance.
func NewHistoryManager(ctrl *gomock.Controller) *HistoryManager {
	mock := &HistoryManager{ctrl: ctrl}
	mock.recorder = &HistoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *HistoryManager) EXPECT() *HistoryManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *HistoryManager) Add(ctx context.Context, word, translation string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", ctx, word, translation)
}

// Add indicates an expected call of Add.
func (mr *HistoryManagerMockRecorder) Add(ctx, word, translation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*HistoryManager)(nil).Add), ctx, word, translation)
}

// GetTranslationHistory mocks base method.
func (m *HistoryManager) GetTranslationHistory(ctx context.Context) []*history.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslationHistory", ctx)
	ret0, _ := ret[0].([]*history.Entry)
	return ret0
}

// GetTranslationHistory indicates an expected call of GetTranslationHistory.
func (mr *HistoryManagerMockRecorder) GetTranslationHistory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslationHistory", reflect.TypeOf((*HistoryManager)(nil).GetTranslationHistory), ctx)
}
